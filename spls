#!/bin/sh

# Init file for Seapine License Server 
#
# chkconfig: 2345 55 25
#
# processname: splicsvr
# config: /etc/splicsvr.conf
# pidfile: /var/run/lsserver.pid

LSUSERID=root

# This is the full path to the splicsvr binary
LSSERVER=/usr/bin//splicsvr

#The maximum number of file handles allowed
LSMAXFILES=12288

#######################################################
# You shouldn't need to edit anything below this point
#######################################################

ID=id
ECHO=echo
OSNAME=`uname -s`

if [ $OSNAME = "SunOS" ]; then
   ID=/usr/xpg4/bin/id

   if [ -f /usr/ucb/echo ]; then
      ECHO=/usr/ucb/echo
   fi
fi

# Check for root
if [ `$ID -u` -ne 0 ]; then
   $ECHO "This script must be run as root."
   exit 1
fi

if [ -f /etc/rc.d/init.d/functions ]
then
   . /etc/rc.d/init.d/functions
elif [ -f /etc/init.d/functions ]
then
   . /etc/init.d/functions
else
   LOGMSG=logger
   PATH="/sbin:/usr/sbin:/bin:/usr/bin:/usr/X11R6/bin"
   checkpid() {
      while [ "$1" ]; do
         [ -d /proc/$1 ] && return 0
         shift
      done
      return 1
   }

   # function to find the pid of a program
   pidofproc() {
        base=`basename $1`
#	removed pidof command for awk script that parse ps output - MJT
#        pid=`pidof -o $$ -o $PPID -o %PPID -x ${base}`
        ps -ef > /tmp/ps.tbl 2> /dev/null
        pid=`awk -F" " '/\/splicsvr/ {print $2}' /tmp/ps.tbl`
		  rm -rf /tmp/ps.tbl > /dev/null 2>&1
        if [ "$pid" != "" ]
        then 
            echo $pid
            return 0 
        fi
    }

    killproc() {
        RC=0
        notset=0
        if [ "$BOOTUP x" = " x" ]; then
           BOOTUP="x"
        fi

        # check for second arg to be kill level
        if [ "$2" != "" ]
        then
           killlevel=$2
        else
           notset=1
           killlevel="-9"
        fi 

        # Save basename. 
        base=`basename $1`

        # Find pid. 
#        pidlist=`pidofproc $1`
#        pid=
#        for apid in $pidlist
#        do 
#          [ -d /proc/$apid ] && pid="$pid $apid"
#        done

        #only one pid should be expected
        pid=`pidofproc $1`

        # Kill it.
        if [ "$pid" != "" ]
        then
            [ $BOOTUP = "verbose" ] && echo -n "$base "
            if [ "$notset" = "1" ]
            then
                if checkpid $pid 2>&1
                then 
                    # TERM first, then KILL if not dead
                    kill -TERM $pid
                    sleep 5
                    if checkpid $pid >/dev/null 2>&1
                    then 
                        sleep 5
                        if checkpid $pid >/dev/null 2>&1
                        then
                            sleep 10
									 kill -KILL $pid
                        fi
                    fi
                fi
                # RC did not return correctly - MJT
                if checkpid $pid >/dev/null 2>&1 
                then
                  failure "$base shutdown" 
						RC=1
                else
                  success "$base shutdown"
						RC=0
                fi 

            # use specified level only
            else
                if checkpid $pid >/dev/null 2>&1
                then
                    kill $killlevel $pid
                    RC=$? 
                    if [ $RC -eq 0 ]; then
                     failure "$base shutdown" 
                    else
                     success "$base shutdown"
                    fi 
                fi
            fi
        else
            failure "$base shutdown" 
        fi 

        return $RC
    }

fi # [ -f */functions ]

failure() {
	echo "[ FAILED ]"
}

success() {
	echo "[ OK ]"
}

start() {
   LSUSERID=$1
   LSSERVER=$2
   LSFLAGS=$3
   RETVAL=0
   su - $LSUSERID -c "$LSSERVER $LSFLAGS" && echo "splicsvr."
   RETVAL=$?
   return $RETVAL
}

RETVAL=0

case "$1" in
  start)
		osname=`uname -s`;
		if [ "$osnamex" = "Linuxx" ]; then
			echo $LSMAXFILES > /proc/sys/fs/file-max
		fi
		ulimit -n $LSMAXFILES
		LSFLAGS="-d "
		start $LSUSERID $LSSERVER "$LSFLAGS"
		RETVAL=$?
     if [ $RETVAL ]; then
        success "$1"
     else
        failure "$1"
     fi
      exit 0;
      ;;
  foreground)
		ulimit -n $LSMAXFILES
		LSFLAGS=""
		echo -n "Starting splicsvr: "
		start $LSUSERID $LSSERVER "$LSFLAGS"
		RETVAL=$?
     if [ $RETVAL ]; then
        success "$1"
     else
        failure "$1"
     fi
      ;;
  stop)
	 echo -n "Shutting down splicsvr (could be slow): "
	 $LSSERVER -s

         #only one pid should be expected
         pid=`pidofproc splicsvr`

         # Kill it.
         if [ "$pid" != "" ]
         then
		 shutdownInProgress=1
                 while [ "$shutdownInProgress" = "1" ]; do
		    sleep 5
		    if checkpid $pid 2>&1
		    then
		       shutdownInProgress=1
                    else
                       shutdownInProgress=0
                    fi
		 done
         fi

         RETVAL=$?

         if [ $RETVAL ]; then
            success "$1"
         else
            failure "$1"
         fi
     ;;
  cleanup)
     echo -n "Cleaning up after splicsvr: "
     $LSSERVER -s
     success "$1"
     ;;
  restart)
     $0 stop
     $0 start
     RETVAL=$?
     if [ $RETVAL ]; then
        success "$1"
     else
        failure "$1"
     fi
     ;;
  *)
     echo "Usage: spls {start|stop|restart|cleanup}"
     exit 1
esac

exit "$RETVAL"
