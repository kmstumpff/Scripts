#!/bin/sh

# Init file for Surround SCM server
#
# chkconfig: 2345 75 25
# description: Surround Software Change Management server
#
# processname: scmserver
# config: /etc/spscm.conf
# pidfile: /var/run/surroundscm.pid

### BEGIN INIT INFO
# Provides: scmserver
# Required-Start: 
# Required-Stop:  
# Should-Start: sppostgres spls
# Should-Stop:    
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Description: Surround Software Change Management server
### END INIT INFO

		
# This is the user id that the ttserver will run under.  For security
# reasons, this should not be root.
TTUSERID=root

# This is the full path to the scmserver binary
TTSERVER=/usr/bin//scmserver

#The maximum number of file handles allowed
#TTMAXFILES=65535

#######################################################
# You shouldn't need to edit anything below this point
#######################################################

if [ -f /etc/rc.d/init.d/functions ]
then
   . /etc/rc.d/init.d/functions
elif [ -f /etc/init.d/functions ]
then
   . /etc/init.d/functions
else
   LOGMSG=logger
   PATH="/sbin:/usr/sbin:/bin:/usr/bin:/usr/X11R6/bin"
   checkpid() {
      while [ "$1" ]; do
         [ -d /proc/$1 ] && return 0
         shift
      done
      return 1
   }

   # function to find the pid of a program
   pidofproc() {
        base=`basename $1`
#	removed pidof command for awk script that parse ps output - MJT
#        pid=`pidof -o $$ -o $PPID -o %PPID -x ${base}`
        ps -ef > /tmp/ps.tbl 2> /dev/null
        pid=`awk -F" " '/\/scmserver/ {print $2}' /tmp/ps.tbl`
		  rm -rf /tmp/ps.tbl > /dev/null 2>&1
        if [ "$pid" != "" ]
        then 
            echo $pid
            return 0 
        fi
    }

    killproc() {
        RC=0
        notset=0
        if [ "$BOOTUP x" = " x" ]; then
           BOOTUP="x"
        fi

        # check for second arg to be kill level
        if [ "$2" != "" ]
        then
           killlevel=$2
        else
           notset=1
           killlevel="-9"
        fi 

        # Save basename. 
        base=`basename $1`

        # Find pid. 
#        pidlist=`pidofproc $1`
#        pid=
#        for apid in $pidlist
#        do 
#          [ -d /proc/$apid ] && pid="$pid $apid"
#        done

        #only one pid should be expected - MJT
        pid=`pidofproc $1`

        # Kill it.
        if [ "$pid" != "" ]
        then
            [ $BOOTUP = "verbose" ] && echo -n "$base "
            if [ "$notset" = "1" ]
            then
                if checkpid $pid 2>&1
                then 
                    # TERM first, then KILL if not dead
                    kill -TERM $pid
                    sleep 7
                    if checkpid $pid >/dev/null 2>&1
                    then 
                        sleep 1
                        if checkpid $pid >/dev/null 2>&1
                        then
                            sleep 3
                            if checkpid $pid >/dev/null 2>&1
                            then
                                kill -KILL $pid
										  # give it plenty of time to DIE! - MJT
										  sleep 10
                            fi
                        fi
                    fi
                fi
                # RC did not return correctly - MJT
                if checkpid $pid >/dev/null 2>&1 
                then
                  failure "$base shutdown" 
						RC=1
                else
                  success "$base shutdown"
						RC=0
                fi 

            # use specified level only
            else
                if checkpid $pid >/dev/null 2>&1
                then
                    kill $killlevel $pid
                    RC=$? 
                    if [ $RC -eq 0 ]; then
                     failure "$base shutdown" 
                    else
                     success "$base shutdown"
                    fi 
                fi
            fi
        else
            failure "$base shutdown" 
        fi 

        # Remove pid file if any.
        if [ "$notset" = "1" ]
        then
            rm -f /var/run/$base.pid
        fi

        return $RC
    }

    failure() {
        echo "[ FAILED ]"
    }

    success() {
        echo "[ OK ]"
    }

fi # [ -f */functions ]

start() {
   TTUSERID=$1
   TTSERVER=$2
   TTFLAGS=$3
   RETVAL=0
   if [ "$osname" = "Darwin" ]; then
		su -m $TTUSERID -c "$TTSERVER $TTFLAGS" && echo "[ OK ]"
		RETVAL=$?
	else
		case "`type -type success`" in
			function)
				su - $TTUSERID -c "$TTSERVER $TTFLAGS" && success "scmserver startup" || failure "scmserver startup"
				RETVAL=$?
				;;
			*)
				su - $TTUSERID -c "$TTSERVER $TTFLAGS" && echo "[ OK ]"
				RETVAL=$?
				;;
      esac
   fi
   return $RETVAL
}

RETVAL=0

case "$1" in
  start)
		osname=`uname -s`;
#		if [ "$osnamex" = "Linuxx" ]; then
#			echo $TTMAXFILES > /proc/sys/fs/file-max
#		fi
#		ulimit -n $TTMAXFILES
#		TTFLAGS="-d " 
#		start $TTUSERID $TTSERVER "$TTFLAGS"
		if [ "$2" = "-mincache" ];   
		 then start $TTUSERID $TTSERVER "-d -m"
		 else start $TTUSERID $TTSERVER "-d "
		fi
      echo
      ;;
  foreground)
#		ulimit -n $TTMAXFILES
		TTFLAGS=""
		echo -n "Starting scmserver: "
		start $TTUSERID $TTSERVER "$TTFLAGS"
      echo
      ;;
  stop)
     RETVAL=0
	  echo -n "Shutting down scmserver (could be slow): "
	  osname=`uname -s`
	  if [ "$osname" = "Darwin" ]; then
        	su $TTUSERID -c "$TTSERVER -s 2>/dev/null"
		  RETVAL=$?
	  else
		  IPCSEM=`/usr/bin/ipcs | grep $TTUSERID`
		  if [ "$IPCSEMx" != "x" ]; then
			  su $TTUSERID -c "$TTSERVER -s 2>/dev/null"
		RETVAL=$?
		  fi
		  PSOUT=`ps -U $TTUSERID | grep scmserver`
		  if [ "$PSOUT" != "" ]; then
			  killproc scmserver
			  RETVAL=$?
		  fi
	  fi
     if [ $RETVAL ]; then
        echo "[ ok ]"
     else
        echo "[ failed ]"
     fi
     ;;
  cleanup)
     echo -n "Cleaning up after scmserver: "
     su $TTUSERID -c "$TTSERVER -s"
     echo "[ OK ]"
     ;;
  restart)
     $0 stop
     $0 start $2
     RETVAL=$?
     ;;
  *)
     echo "Usage: surroundscm {start|stop|restart|cleanup} [-mincache]"
     exit 1
esac

exit "$RETVAL"
